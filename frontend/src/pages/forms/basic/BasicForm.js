import React from 'react';
import { Form, RadioGroup, Radio, Checkbox, CheckboxGroup, DatePicker, DateRangePicker, CheckPicker, SelectPicker, TagPicker, Input, TagInput, MaskedInput, InputPicker, InputNumber, Cascader, MultiCascader, Rate, Uploader, Message, Divider, TreePicker, CheckTreePicker, ButtonToolbar, Button, Toggle, AutoComplete } from 'rsuite';
import PageContent from '@/components/PageContent';
import { mockTreeData } from '@/data/mock';
const treeData = mockTreeData({ limits: [2, 3, 3], labels: ['Provincial', 'County', 'Town'] });
const selectData = ['Eugenia', 'Bryan', 'Linda', 'Nancy', 'Lloyd', 'Alice'].map(item => ({
    label: item,
    value: item
}));
const Textarea = React.forwardRef((props, ref) => (React.createElement(Input, { ...props, as: "textarea", ref: ref })));
const BasicForm = () => {
    return (React.createElement(PageContent, null,
        React.createElement(Message, null,
            "The following demonstrates the common components of forms provided by rsuite. For more detailed usage of forms, please refer to the",
            ' ',
            React.createElement("a", { href: "https://rsuitejs.com/components/form/", target: "_blank", rel: "noreferrer" }, "form usage"),
            "."),
        React.createElement(Divider, null),
        React.createElement(Form, { className: "basic-form", layout: "horizontal" },
            React.createElement(Form.Group, { controlId: "Input" },
                React.createElement(Form.ControlLabel, null, "Input"),
                React.createElement(Form.Control, { name: "Input" })),
            React.createElement(Form.Group, { controlId: "MaskedInput" },
                React.createElement(Form.ControlLabel, null, "MaskedInput"),
                React.createElement(Form.Control, { name: "MaskedInput", accepter: MaskedInput, placeholder: "(555) 495-3947", mask: [
                        '(',
                        /[1-9]/,
                        /\d/,
                        /\d/,
                        ')',
                        ' ',
                        /\d/,
                        /\d/,
                        /\d/,
                        '-',
                        /\d/,
                        /\d/,
                        /\d/,
                        /\d/
                    ] })),
            React.createElement(Form.Group, { controlId: "TagInput" },
                React.createElement(Form.ControlLabel, null, "TagInput"),
                React.createElement(Form.Control, { name: "TagInput", accepter: TagInput })),
            React.createElement(Form.Group, { controlId: "InputNumber" },
                React.createElement(Form.ControlLabel, null, "InputNumber"),
                React.createElement(Form.Control, { name: "InputNumber", accepter: InputNumber })),
            React.createElement(Form.Group, { controlId: "AutoComplete" },
                React.createElement(Form.ControlLabel, null, "AutoComplete"),
                React.createElement(Form.Control, { name: "AutoComplete", accepter: AutoComplete, data: selectData })),
            React.createElement(Form.Group, { controlId: "Textarea" },
                React.createElement(Form.ControlLabel, null, "Textarea"),
                React.createElement(Form.Control, { name: "Textarea", accepter: Textarea, rows: 3 })),
            React.createElement(Form.Group, { controlId: "checkbox" },
                React.createElement(Form.ControlLabel, null, "Checkbox"),
                React.createElement(Form.Control, { name: "checkbox", accepter: CheckboxGroup, inline: true, style: { marginLeft: -20 } },
                    React.createElement(Checkbox, { value: "HTML" }, "HTML"),
                    React.createElement(Checkbox, { value: "CSS" }, "CSS"),
                    React.createElement(Checkbox, { value: "Javascript" }, "Javascript"))),
            React.createElement(Form.Group, { controlId: "radio" },
                React.createElement(Form.ControlLabel, null, "Radio"),
                React.createElement(Form.Control, { name: "radio", accepter: RadioGroup, inline: true, style: { marginLeft: -20 } },
                    React.createElement(Radio, { value: "HTML" }, "HTML"),
                    React.createElement(Radio, { value: "CSS" }, "CSS"),
                    React.createElement(Radio, { value: "Javascript" }, "Javascript"))),
            React.createElement(Form.Group, { controlId: "datePicker" },
                React.createElement(Form.ControlLabel, null, "DatePicker"),
                React.createElement(Form.Control, { name: "datePicker", accepter: DatePicker })),
            React.createElement(Form.Group, { controlId: "dateRangePicker" },
                React.createElement(Form.ControlLabel, null, "DateRangePicker"),
                React.createElement(Form.Control, { name: "dateRangePicker", accepter: DateRangePicker })),
            React.createElement(Form.Group, { controlId: "checkPicker" },
                React.createElement(Form.ControlLabel, null, "CheckPicker"),
                React.createElement(Form.Control, { name: "checkPicker", accepter: CheckPicker, data: selectData })),
            React.createElement(Form.Group, { controlId: "selectPicker" },
                React.createElement(Form.ControlLabel, null, "SelectPicker"),
                React.createElement(Form.Control, { name: "selectPicker", accepter: SelectPicker, data: selectData })),
            React.createElement(Form.Group, { controlId: "tagPicker" },
                React.createElement(Form.ControlLabel, null, "TagPicker"),
                React.createElement(Form.Control, { name: "tagPicker", accepter: TagPicker, data: selectData })),
            React.createElement(Form.Group, { controlId: "inputPicker" },
                React.createElement(Form.ControlLabel, null, "InputPicker"),
                React.createElement(Form.Control, { name: "inputPicker", accepter: InputPicker, data: selectData })),
            React.createElement(Form.Group, { controlId: "cascader" },
                React.createElement(Form.ControlLabel, null, "Cascader"),
                React.createElement(Form.Control, { name: "cascader", accepter: Cascader, data: treeData })),
            React.createElement(Form.Group, { controlId: "multiCascader" },
                React.createElement(Form.ControlLabel, null, "MultiCascader"),
                React.createElement(Form.Control, { name: "multiCascader", accepter: MultiCascader, data: treeData })),
            React.createElement(Form.Group, { controlId: "TreePicker" },
                React.createElement(Form.ControlLabel, null, "TreePicker"),
                React.createElement(Form.Control, { name: "TreePicker", accepter: TreePicker, data: treeData })),
            React.createElement(Form.Group, { controlId: "CheckTreePicker" },
                React.createElement(Form.ControlLabel, null, "CheckTreePicker"),
                React.createElement(Form.Control, { name: "CheckTreePicker", accepter: CheckTreePicker, data: treeData })),
            React.createElement(Form.Group, { controlId: "rate" },
                React.createElement(Form.ControlLabel, null, "Rate"),
                React.createElement(Form.Control, { name: "rate", accepter: Rate })),
            React.createElement(Form.Group, { controlId: "uploader" },
                React.createElement(Form.ControlLabel, null, "Uploader"),
                React.createElement(Form.Control, { name: "uploader", accepter: Uploader, action: "#" })),
            React.createElement(Form.Group, { controlId: "Toggle" },
                React.createElement(Form.ControlLabel, null, "Toggle"),
                React.createElement(Toggle, { style: { lineHeight: '36px' } })),
            React.createElement(Form.Group, null,
                React.createElement(ButtonToolbar, null,
                    React.createElement(Button, { appearance: "primary" }, "Submit"),
                    React.createElement(Button, { appearance: "default" }, "Cancel"))))));
};
export default BasicForm;
//# sourceMappingURL=BasicForm.js.map